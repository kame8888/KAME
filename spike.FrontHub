import hub, time
from spike import Motor, MotorPair, PrimeHub
from spike.control import wait_for_seconds

# serial ini
spike = PrimeHub()
usb = hub.USB_VCP(0)
# motor ini
L1 = Motor('A')
R1 = Motor('B')
L2 = Motor('E')
R2 = Motor('F')
robot = MotorPair('C','D')

tmp = ""
b = ""
res = ""
flg = True
flg2 = True
phase = 0

# start recive
while True:
    if spike.left_button.is_pressed():
        raise SystemExit
    b = usb.readline()
    if b != None:
        res = b.decode('utf-8')
    else:
        if flg:
            spike.status_light.on('blue')
        else:
            spike.status_light.on('green')
        tmp = ""
        b = ""
        d = ""
    if "\n" in res:
        tmp = res.replace('\n', '')
        if tmp == "front":
            spike.light_matrix.show_image('ARROW_W')
            robot.start(0,80)
        elif tmp == 'back':
            spike.light_matrix.show_image('ARROW_E')
            robot.start(0,-80)
        elif tmp == 'left':
            spike.light_matrix.show_image('ARROW_S')
            robot.start(-100,100)
        elif tmp == 'right':
            spike.light_matrix.show_image('ARROW_N')
            robot.start(100,100)
        elif tmp == 'off':
            spike.light_matrix.show_image('NO')
            robot.stop()
        elif tmp == 'L1front':
            spike.light_matrix.show_image('ARROW_SW')
            L1.start(60)
        elif tmp == 'L1back':
            spike.light_matrix.show_image('ARROW_SW')
            L1.start(-60)
        elif tmp == 'R1front':
            spike.light_matrix.show_image('ARROW_NW')
            R1.start(-60)
        elif tmp == 'R1back':
            spike.light_matrix.show_image('ARROW_NW')
            R1.start(60)
        elif tmp == 'L2front':
            spike.light_matrix.show_image('ARROW_SE')
            L2.start(50)
        elif tmp == 'L2back':
            spike.light_matrix.show_image('ARROW_SE')
            L2.start(-50)
        elif tmp == 'R2front':
            spike.light_matrix.show_image('ARROW_NE')
            R2.start(-50)
        elif tmp == 'R2back':
            spike.light_matrix.show_image('ARROW_NE')
            R2.start(50)
        elif tmp == 'stop':
            spike.light_matrix.show_image('NO')
            L1.stop()
            L2.stop()
            R1.stop()
            R2.stop()
        elif tmp == 'check' and flg2:   
            robot.stop()
            robot.move(0.2,'rotations',0,-15)
            spike.speaker.beep(70, 0.4)
            wait_for_seconds(14)
            robot.move(0.6,'rotations',0,30)
            wait_for_seconds(3)
            robot.start(0,-40)
            wait_for_seconds(2)
            robot.stop()
            spike.speaker.beep(80, 0.5)
            flg2 = False
        elif tmp == 'next':
            if phase == 0 and flg:
                spike.speaker.beep(60, 0.3)
                R1.run_for_rotations(1.3,-100)
                L1.run_for_rotations(1.3,100)
                R2.run_for_rotations(0.9,100)
                L2.run_for_rotations(0.9,-100)
                spike.speaker.beep(60, 0.3)
                robot.start(0,25)
                wait_for_seconds(4.5)
                robot.stop()
                spike.speaker.beep(60, 0.3)
                R1.run_for_rotations(1.3,100)
                L1.run_for_rotations(1.3,-100)
                R2.run_for_rotations(0,-100)
                L2.run_for_rotations(0,100)
                spike.speaker.beep(60, 0.3)
                wait_for_seconds(6)
                spike.speaker.beep(60, 0.3)
                robot.start(0,15)
                flg = False
            """
            if flg:
                robot.move(0.4,'rotations',0,50)
                flg = False
            """
        elif tmp == 'reset':
            flg = True
            flg2 = True
        else:
            tmp = ""
            b = ""
        tmp = ""
        b = ""
        d = ""
    else:
        spike.status_light.on('red')
        tmp = ""
        b = ""
        d = ""
